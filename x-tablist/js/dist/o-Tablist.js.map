{"version":3,"sources":["x-tablist/js/src/o-Tablist.js"],"names":["document","querySelectorAll","forEach","tablist","switchTabs","tab_old","tab_new","focus","panel","open","attributeChangedCallback","this","panels","Array","from","children","filter","el","matches","tab","createElement","summary","querySelector","attributes","attr","removeNamedItem","name","setNamedItem","append","childNodes","hidden","insertBefore","tabs","call","updateRendering","find","_panel","nextElementSibling","id","setAttribute","tabIndex","addEventListener","e","parentNode","Keys","which","preventDefault","next_tab_index","findIndex","length","prev_tab_index","_tab","previousElementSibling","_updateRendering","oldValue","newValue","returned","p","[object Object]","default"],"mappings":"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","file":"o-Tablist.js","sourcesContent":["/**\n * A list of tab-panel pairs, wherein all tabs and at most one panel are exposed to the user.\n * @class\n */\ndocument.querySelectorAll('.o-Tablist[role=\"tablist\"]').forEach(function (tablist) {\n  /**\n   * Runs immediately.\n   * @constructor\n   */\n  ;(function constructor() {\n    /**\n     * The set of panels.\n     * @return {Array<HTMLDetailsElement>}\n     */\n    this.panels = function () { return Array.from(this.children).filter((el) => el.matches('[role=\"tabpanel\"]')) }\n\n    /**\n     * Move the tabs (<summary>) outside of the panels (<details>), into the tablist.\n     */\n    this.panels().forEach(function (panel) {\n\n      let tab = document.createElement('div')\n      let summary = panel.querySelector('summary')\n\n      // transfer the attributes\n      Array.from(summary.attributes).forEach(function (attr) {\n        summary.attributes.removeNamedItem(attr.name)\n        tab.attributes.setNamedItem(attr)\n      })\n\n      // transfer the children\n      tab.append(...summary.childNodes)\n\n      summary.hidden = true\n\n      this.insertBefore(tab, panel)\n    }, this)\n\n    /**\n     * The set of tabs.\n     * @return {Array<HTMLDivElement>}\n     */\n    this.tabs = function () { return Array.from(this.children).filter((el) => el.matches('[role=\"tab\"]')) }\n  }).call(tablist)\n\n\n  /**\n   * Update any children and shadow dom view of this element.\n   */\n  tablist.updateRendering = function () {\n    // Expand the first panel if this tab list contains all collapsed panels.\n    let no_panels_open = this.panels()[0] && !this.panels().find((el) => el.open)\n    if (no_panels_open) {\n      switchTabs(null, this.tabs()[0])\n    }\n  }\n\n\n  /**\n   * Switch to a new tab.\n   * @static\n   * @param   {?HTMLElement} tab_old the tab currently expanded, or `null` if no tab is expanded (or it doesn’t matter which tab is expanded)\n   * @param   {HTMLElement} tab_new the tab to expand\n   */\n  function switchTabs(tab_old, tab_new) {\n    tab_new.focus()\n    tab_new.panel().open = true\n    tab_new.panel().attributeChangedCallback('open', null, '')\n  }\n\n\n\n  /**\n   * A tab in a tab list.\n   * @inner\n   * @class\n   */\n  tablist.tabs().forEach(function (tab) {\n    /**\n     * Runs immediately.\n     * @constructor\n     */\n    ;(function constructor() {\n      /**\n       * The panel that this tab controls.\n       * @private\n       * @type {CustomTabpanel}\n       */\n      this._panel = this.nextElementSibling\n\n      this.id = `tab-for-${this._panel.id}`\n      this.setAttribute('aria-controls', this._panel.id)\n      this.tabIndex = 0\n\n      this.addEventListener('click', function (e) {\n        if (this.parentNode && this.parentNode.matches('[role=\"tablist\"]')) {\n          switchTabs(null, this)\n        }\n      })\n\n      this.addEventListener('keydown', function (e) {\n        /**\n         * Key codes.\n         * @enum {number}\n         */\n        const Keys = {\n          SPACE: 32,\n          END  : 35,\n          HOME : 36,\n          LEFT : 37,\n          UP   : 38,\n          RIGHT: 39,\n          DOWN : 40,\n        }\n        switch (e.which) {\n          case Keys.SPACE:\n            e.preventDefault()\n            switchTabs(null, this)\n            break;\n          case Keys.DOWN:\n          case Keys.RIGHT:\n            e.preventDefault()\n            let next_tab_index = this.parentNode.tabs().findIndex((tab) => tab===this) + 1\n            switchTabs(this, this.parentNode.tabs()[\n              (next_tab_index < this.parentNode.tabs().length) ? next_tab_index : 0\n            ])\n            break;\n          case Keys.UP:\n          case Keys.LEFT:\n            e.preventDefault()\n            let prev_tab_index = this.parentNode.tabs().findIndex((tab) => tab===this) - 1\n            switchTabs(this, this.parentNode.tabs()[\n              (prev_tab_index >= 0) ? prev_tab_index : this.parentNode.tabs().length - 1\n            ])\n            break;\n          case Keys.HOME:\n            e.preventDefault()\n            switchTabs(this, this.parentNode.tabs()[0])\n            break;\n          case Keys.END:\n            e.preventDefault()\n            switchTabs(this, this.parentNode.tabs()[this.parentNode.tabs().length - 1])\n            break;\n        }\n      })\n\n      // **CLOSE BUTTONS**\n      // if (this.querySelector('button[value=\"close\"]')) {\n      //   this.querySelector('button[value=\"close\"]').addEventListener('click', function (e) {\n      //     this._panel.remove()\n      //     this.remove()\n      //     tablist.updateRendering()\n      //   })\n      // }\n    }).call(tab)\n\n\n    /**\n     * The panel that this tab controls. Getter.\n     * @type {CustomTabpanel}\n     */\n    tab.panel = function () {\n      return this._panel\n    }\n\n\n  })\n\n\n\n  /**\n   * A panel in a tab list.\n   * @inner\n   * @class\n   */\n  tablist.panels().forEach(function (panel) {\n    /**\n     * Runs immediately.\n     * @constructor\n     */\n    ;(function constructor() {\n      /**\n       * The tab that controls this panel.\n       * @private\n       * @type {CustomTab}\n       */\n      this._tab = this.previousElementSibling\n\n      this.setAttribute('aria-labelledby', this._tab.id)\n    }).call(panel)\n\n\n    /**\n     * Update any children and shadow dom view of this element.\n     * @private\n     */\n    panel._updateRendering = function () {\n      this.hidden = !this.open // hide from screen readers & disabled tab-able items\n      this._tab.setAttribute('aria-selected', this.open)\n      this._tab.setAttribute('aria-expanded', this.open)\n      this.parentNode.updateRendering()\n    }\n\n\n    /**\n     * @override HTMLElement#attributeChangedCallback\n     * @param   {string} name the local name of the attriute changed\n     * @param   {string} oldValue the attribute’s old value, or `null` if it had none\n     * @param   {string} newValue the new value to which to set the attribute, or `null` if it is removed\n     */\n    panel.attributeChangedCallback = function (name, oldValue, newValue) {\n      const returned = {\n        'open': function (oldValue, newValue) {\n          if (newValue === '') {\n            // If setting the `open` attribute, collapse all panels not === to this one.\n            this.parentNode.panels().forEach(function (p) {\n              if (p !== this) {\n                p.open = false // HTMLDetailsElement#open is a setter/getter\n                p.attributeChangedCallback('open', null, null)\n                p._updateRendering()\n              }\n            }, this)\n          }\n          this._updateRendering()\n        },\n        default(oldValue, newValue) {},\n      }\n      ;(returned[name] || returned.default).call(this, oldValue, newValue)\n    }\n\n\n    /**\n     * The tab that controls this panel. Getter.\n     * @type {CustomTab}\n     */\n    panel.tab = function () {\n      return this._tab\n    }\n  })\n\n\n\n  // initial rendering on load (would be in Tablist constructor, but depends on Tab and Panel instance methods)\n  ;(function () {\n    this.updateRendering()\n    this.panels().find((el) => el.open).attributeChangedCallback('open', null, '')\n  }).call(tablist)\n})\n\n\n// **CLOSE BUTTONS**\n// document.querySelector('#update > button').addEventListener('click', function () {\n//   console.log(document.querySelector('[role=\"tablist\"]').tabs())\n//   document.querySelector('[role=\"tablist\"]').panels()[0].open = false\n// })\n"]}