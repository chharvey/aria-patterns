{"version":3,"sources":["x-tablist/css/src/o-Tablist.less"],"names":[],"mappings":"AAsFA,WACE,QAAA,KACA,UAAA,KAEA,sCACE,eAAA,OACA,cAAA,WAIJ,gBACE,MAAA,GACA,KAAA,EACA,OAAA,QAEA,oCACE,YAAA,IAEF,0CACE,MAAA,EAIJ,kBACE,cAAA,EACA,qBAAA,MAAA,iBAAA,MACA,KAAA","file":"o-Tablist.css","sourcesContent":["\n/*################################*\\\n    o-Tablist.less\n\\*################################*/\n\n\n// The Tablist Object\n//\n// The Tablist Object contains a series of corresponding tabs and panels.\n// It is similar to a carousel, but only one panel is shown at a time and\n// there is no timed automatic progression.\n//\n// Note: Enable Javascript to view effects.\n// Ensure the `[defer]` attribute is set on the `<script>`\n// (or else move the `<script>` to the bottom of the `<body>`).\n//\n// Your markup should include a series of `<details>` elements, each with a single `<summary>` first child.\n// Add the `[open]` attribute to one `<details>` element, representing the panel to be initially opened on load.\n// The front-end script will transform your source code into the respective panels and tabs as necessary.\n// Without JavaScript enabled, this object will fall back to a set of fully-functional `<details>` expandables.\n//\n// The tablist itself may have a horizontal or vertical orientation,\n// specified by the `[aria-orientation]` attribute.\n// This attribute semantically indicates the tablist layout to assistive technology,\n// as well as defines keyboard interaction.\n// This attribute can be changed dynamically after load.\n// If the author chooses to use a vertical layout, they are responsible for\n// *visually* styling the tablist in a vertical orientation (specifically, providing a height),\n// as there are no default styles for said layout.\n//\n// In either the horizontal or vertical orientation, a boolean `[data-reversed]` attribute may be specified.\n// If true (i.e., the attribute is present), it indicates that the tabs come *after* the panels\n// in source order and display order.\n// This is useful if you want your tabs below or to the right of the panels.\n// This attribute is **static**, meaning that once the script runs, the DOM of the tablist cannot be changed.\n//\n// A few rules for markup:\n//\n// - On the tablist container, the `[aria-orientation]` attribute should be specified,\n//   and it should have a value of either `\"horizontal\"` or `\"vertical\"` (case sensitive).\n//   If the attribute is not specified, or it has another value, the arrow keys will not work during user interaction.\n// - As required by the [HTML Specification](https://www.w3.org/TR/html52/interactive-elements.html#the-details-element),\n//   each `details` element must contain exactly one `summary` element, followed by optional flow content.\n//   Each `summary` element must contain either phrasing content, or one heading element (`h1`â€“`h6`).\n// - Each `details` element in the tablist should have the (unique) `[id]` attribute set.\n//   This enables the `[aria-controls]` and `[aria-labelledby]` accessibility features.\n// - The `[open]` attribute should be set on exactly one `details` element in the tablist.\n//   If there are no `details[open]` elements, the first panel will be expanded by default;\n//   if there are more than one, the first `[open]` panel is expanded and all the rest are collapsed.\n//\n// <footer>See https://codepen.io/chharvey/pen/PEYxpb for more info.</footer>\n// <header><dl>\n//   <dt>author</dt>  <dd>Chris Harvey</dd>\n//   <dt>updated</dt> <dd><time>2018-05-04</time></dd>\n// </dl></header>\n//\n// Markup:\n// <!--link rel=\"stylesheet\" href=\"/node_modules/aria-patterns/x-tablist/css/dist/o-Tablist.css\"/-->\n// <!--script src=\"/node_modules/aria-patterns/x-tablist/js/dist/o-Tablist.js\" defer=\"\"></script-->\n// <div class=\"o-Tablist\" role=\"tablist\" aria-orientation=\"horizontal\">\n//   <details class=\"o-Tablist__Panel\" role=\"tabpanel\" id=\"panel1\">\n//     <summary class=\"o-Tablist__Tab\" role=\"tab\">Tab 1</summary>\n//     <h1>Panel 1</h1>\n//     <p>This is panel 1. Switch to the next <a href=\"#0\">panel</a> by clicking its tab.</p>\n//   </details>\n//   <details class=\"o-Tablist__Panel\" role=\"tabpanel\" id=\"panel2\" open=\"\">\n//     <summary class=\"o-Tablist__Tab\" role=\"tab\">Tab 2</summary>\n//     <h1>Panel 2</h1>\n//     <p>This is panel 2. Panels can contain <a href=\"#0\">flow content</a>.</p>\n//     <p>That is, you can put <a href=\"#0\">block elements</a> here.</p>\n//   </details>\n//   <details class=\"o-Tablist__Panel\" role=\"tabpanel\" id=\"panel3\">\n//     <summary class=\"o-Tablist__Tab\" role=\"tab\">Tab 3</summary>\n//     <h1>Panel 3</h1>\n//     <p>This is panel 3, the <a href=\"#0\">largest</a> panel.</p>\n//     <form>\n//       <h2>A form:</h2>\n//       <p>This form has a <button type=\"button\">button</button> and a <input type=\"text\" placeholder=\"text input\"/>.</p>\n//     </form>\n//     <p><a href=\"http://dev-chharvey.github.io/blog/html/tablist.html\" rel=\"external\" target=\"_blank\">Read the proposal text here.</a></p>\n//   </details>\n// </div>\n//\n// Weight: 1\n//\n// Styleguide Objects.Tablist\n.o-Tablist {\n  display: flex;\n  flex-wrap: wrap;\n  // appearance: tabpanels; // opinionated\n  &[aria-orientation=\"vertical\"] {\n    flex-direction: column;\n    align-content: flex-start;\n  }\n}\n\n.o-Tablist__Tab {\n  order: -1;\n  flex: 1;\n  cursor: pointer;\n  // appearance: tab; // opinionated\n  &[aria-selected=\"true\"] {\n    font-weight: bold; // opinionated\n  }\n  .o-Tablist[data-reversed] & {\n    order: 1;\n  }\n}\n\n.o-Tablist__Panel {\n  margin-bottom: 0; // HACK fallback\n  margin-block-end: unset; // unset Xmeter base `details`\n  flex: 100%;\n  // appearance: tabpanel; // opinionated\n}\n"]}